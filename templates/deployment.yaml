apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "diode-chart.fullname" . }}
  labels:
    {{- include "diode-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "diode-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "diode-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "diode-chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - ps aux | egrep "diode\s+--dbpath=\/\w+\/\w+\/\w+\s+"
            initialDelaySeconds: 15
            periodSeconds: 10
            failureThreshold: 10 
          livenessProbe: 
            exec:
              command:
              - bash
              - '-c'
              - |
                ps aux | egrep "diode\s+--dbpath=\/\w+\/\w+\/\w+\s+"
            periodSeconds: 10
            failureThreshold: 10
          env:
            - name: LOCAL_DIODE_SVC_CLUSTERIP
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_SVC_CLUSTERIP
            - name: LOCAL_DIODE_SVC_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_SVC_PORT
            - name: LOCAL_DIODE_TARGET_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_TARGET_PORT
            - name: LOCAL_DIODE_HEX
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_HEX
            - name: LOCAL_DIODE_PINATA
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_PINATA
            - name: LOCAL_DIODE_KEY_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_KEY_NAME
            - name: LOCAL_DIODE_PROTOCOL
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_PROTOCOL
            - name: LOCAL_DIODE_MODE
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_DIODE_MODE
            - name: LOCAL_PUBLISH_TYPE
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: LOCAL_PUBLISH_TYPE
            - name: REMOTE_DIODE_HEX
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: REMOTE_DIODE_HEX
            - name: REMOTE_DIODE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: REMOTE_DIODE_PORT
            - name: REMOTE_DIODE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: REMOTE_DIODE_HOST
            - name: REMOTE_DIODE_PROTOCOL
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: REMOTE_DIODE_PROTOCOL
            - name: REMOTE_PUBLISH_TYPE
              valueFrom:
                secretKeyRef:
                  name: {{ include "diode-chart.fullname" . }}
                  key: REMOTE_PUBLISH_TYPE
          args:
            - |
              LOCAL_DB_PATH=/go/diode/$LOCAL_DIODE_KEY_NAME
              DOWNLOAD_KEY=https://gateway.pinata.cloud/ipfs/$LOCAL_DIODE_PINATA
              
              if [ ! -f "$LOCAL_DB_PATH" ]; then
                echo "Downloading $LOCAL_DB_PATH"
                wget "$DOWNLOAD_KEY" -O "$LOCAL_DB_PATH"
              fi

              # Remove the previous diode_errors.log file for bind only
              # because when bind losses connection, it throws connection error
              # We remove it so that we know that presense of new error is another failed pod
              # We don't need to do this for publish because publish isn't affected by connection state
              rm /go/diode/diode_errors.log

              if [ $LOCAL_DIODE_MODE = "publish" ];
                then
                  # Use the diode_errors.log file to capture error messages
                  diode --dbpath="$LOCAL_DB_PATH" -diodeaddrs="eu1.prenet.diode.io:443" publish "-$LOCAL_PUBLISH_TYPE" $LOCAL_DIODE_SVC_CLUSTERIP:$LOCAL_DIODE_SVC_PORT:$LOCAL_DIODE_TARGET_PORT,$REMOTE_DIODE_HEX -proxy_port $LOCAL_DIODE_TARGET_PORT >/dev/null 2>&1 &
                  sleep 2
                  echo "LOCAL_HEX VALUE: $LOCAL_DIODE_HEX"
                  echo "LOCAL_DB_URL : https://$(diode --dbpath="$LOCAL_DB_PATH" config 2>&1 | awk '/Client address/ { print $5 }').diode.link"
                  tail -f /dev/null
                elif [ $LOCAL_DIODE_MODE = "bind" ];
                then
                  diode --dbpath="$LOCAL_DB_PATH" -diodeaddrs="eu1.prenet.diode.io:443" -bind "$LOCAL_DIODE_TARGET_PORT:$REMOTE_DIODE_HEX:$REMOTE_DIODE_PORT:$LOCAL_DIODE_PROTOCOL" publish >/dev/null 2>>/go/diode/diode_errors.log &
                  sleep 2
                  echo "LOCAL_HEX VALUE: $LOCAL_DIODE_HEX"
                  echo "LOCAL_DB_URL : https://$(diode --dbpath="$LOCAL_DB_PATH" config 2>&1 | awk '/Client address/ { print $5 }').diode.link"
                  tail -f /dev/null
                else [ $LOCAL_DIODE_MODE = "both" ];
                  diode --dbpath="$LOCAL_DB_PATH" -diodeaddrs="eu1.prenet.diode.io:443" publish "-$LOCAL_PUBLISH_TYPE" $LOCAL_DIODE_SVC_CLUSTERIP:$LOCAL_DIODE_SVC_PORT:$LOCAL_DIODE_TARGET_PORT,$REMOTE_DIODE_HEX -proxy_port $LOCAL_DIODE_TARGET_PORT >/dev/null 2>&1 &
                  sleep 2
                  diode --dbpath="$LOCAL_DB_PATH" -diodeaddrs="eu1.prenet.diode.io:443" -bind "$LOCAL_DIODE_TARGET_PORT:$REMOTE_DIODE_HEX:$REMOTE_DIODE_PORT:$LOCAL_DIODE_PROTOCOL" publish >/dev/null 2>>/go/diode/diode_errors.log &
                  sleep 2
                  echo "LOCAL_HEX VALUE: $LOCAL_DIODE_HEX"
                  echo "LOCAL_DB_URL : https://$(diode --dbpath="$LOCAL_DB_PATH" config 2>&1 | awk '/Client address/ { print $5 }').diode.link"
                  tail -f /dev/null
              fi 
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
